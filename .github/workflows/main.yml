---
name: main

on:
  create:
    tags:  # any tag regardless of its name, no branches
      - "**"
  push:
    branches:  # any integration branch but not tag
      - "*"

jobs:
  validate_code:
    name: ${{ matrix.name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: yaml lint
            command: yamllint --strict .
            install_requirements: true
            # TODO except: ['triggers', 'master'] from gitlab-ci does not fit very well matrix as defined by github ?
            # as from lint.yml : this except should apply on every step
          - name: vagrant validate
            command: |
              export VAGRANT_VERSION
              sudo -E bash -c "${PWD}/tests/scripts/vagrant-validate.sh"
              echo done

          - name: ansible-lint
            command: |-
                grep -Rl '^- hosts: \|^  hosts: ' --include \*.yml --include \*.yaml . | xargs -P 4 -n 25 ansible-lint -v
            install_requirements: true

          - name: syntax-check
            inventory: inventory/local-tests.cfg
            command: |
              ansible-playbook --syntax-check cluster.yml
              ansible-playbook --syntax-check upgrade-cluster.yml
              ansible-playbook --syntax-check reset.yml
              ansible-playbook --syntax-check extra_playbooks/upgrade-only-k8s.yml
            install_requirements: true

          # FIXME :no py 3.3 avalaible in github (could be enabled)
          # - name: tox-inventory-builder
          #   command: |
          #     pip3 install tox
          #     cd contrib/inventory_builder && tox

          - name: markdownlint
            command: |
              sudo npm install -g markdownlint-cli@0.22.0
              markdownlint $(find . -name '*.md' | grep -vF './.git') --ignore docs/_sidebar.md --ignore contrib/dind/README.md

          - name: ci-matrix
            commande: |
              tests/scripts/md-table/test.sh
    env:
      VAGRANT_VERSION: 2.2.14
      KUBESPRAY_VERSION: v2.14.1
      ANSIBLE_FORCE_COLOR: "true"
      SSH_USER: root
      MITOGEN_ENABLE: "false"
      ANSIBLE_LOG_LEVEL: "-vv"
      ANSIBLE_REMOTE_USER: root
      ANSIBLE_BECOME: "true"
      ANSIBLE_BECOME_USER: root
      ANSIBLE_VERBOSITY: "3"
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install a default Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: x64
      - name: Install dependencies
        run: |
          echo do some python -m pip install if needed

      - name: Rebase
        run: |
          # No CI_COMMIT_REF_NAME => find a way to get it ? ./tests/scripts/rebase.sh

      - name: Create ssh directory
        run: |
          sudo mkdir -p /.ssh

      - name: Install requirements
        run: |
          python -m pip install -r tests/requirements.txt
        if: ${{ contains(matrix.install_requirements, 'true') }}

      - name: Run command
        run: |
          ${{ matrix.command }}
        env:
          ANSIBLE_INVENTORY: ${{ matrix.inventory }}

  validate_tf:
    name: Validate tf ${{ matrix.tf_version }} - ${{ matrix.provider }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        tf_version: [0.12.29, 0.13.5, 0.14.3]
        # FIXME before merge : packet requires auth_token
        provider: [openstack, aws]

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install a default Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: x64

      # - name: Rebase
      #   run: |
      #     # FIXME need CI_REF_SLUG
      #     # ./tests/scripts/rebase.sh

      - name: Install Terraform
        run: |
          sudo bash -c "PROVIDER=${PROVIDER} TF_VERSION=${TF_VERSION} ./tests/scripts/testcases_prepare.sh"
          sudo sudo bash -c "PROVIDER=${PROVIDER} TF_VERSION=${TF_VERSION} ./tests/scripts/terraform_install.sh"
        env:
          PROVIDER: ${{ matrix.provider }}
          TF_VERSION: ${{ matrix.tf_version }}

      - name: Setup test config
        run: |
          # Set Ansible config
          cp ansible.cfg ~/.ansible.cfg
          # Prepare inventory
          cp contrib/terraform/$PROVIDER/sample-inventory/cluster.tfvars .
          ln -s contrib/terraform/$PROVIDER/hosts
          terraform init contrib/terraform/$PROVIDER
        env:
          PROVIDER: ${{ matrix.provider }}
          TF_VERSION: ${{ matrix.tf_version }}

      - name: Validate Teraforms
        run: |
          terraform validate -var-file=cluster.tfvars contrib/terraform/$PROVIDER
          terraform fmt -check -diff contrib/terraform/$PROVIDER
        env:
          PROVIDER: ${{ matrix.provider }}
          TF_VERSION: ${{ matrix.tf_version }}

  kubevirt:
    name: ${{ matrix.ci_job_name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - ci_job_name: packet_centos8-calico
            log_dir: /tmp/packet_centos8-calico-${{ github.run_id }}/logs
    env:
      KUBERNETES_VERSION: v1.19.1
      KUBESPRAY_VERSION: v2.14.1
      ANSIBLE_FORCE_COLOR: "true"
      SSH_USER: kubespray
      MITOGEN_ENABLE: "false"
      ANSIBLE_LOG_LEVEL: "-vv"
      UPGRADE_TEST: "false"

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Rebase
        run: |
          # No CI_COMMIT_REF_NAME => find a way to get it ? ./tests/scripts/rebase.sh

      - name: Install a default Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: x64

      - name: Install requirements
        run: |
          sudo python3 -m pip install -r tests/requirements.txt


      - name: Install docker
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            . /etc/os-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce

      - name: Install kubectl
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl; chmod +x ./kubectl
            sudo install kubectl /usr/local/bin

      - name: Install kind
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.9.0/kind-$(uname)-amd64" && chmod +x ./kind
            sudo install kind /usr/local/bin

      - name: Create single node Cluster
        run: |
          cat <<EOF | sudo kind create cluster -v7 --wait 1m --retain --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            ipFamily: ipv4
          EOF

      - name: Wait and get Cluster status
        run: |
          # wait network is ready
          sudo kubectl wait --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
          sudo kubectl get nodes -o wide
          sudo kubectl get pods -A

      - name: Install kubevirt packages requirements
        run: |
          sudo apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager libvirt-daemon-system
          sudo systemctl restart libvirtd

      - name: Tweak ubuntu apparmor for Kubevirt
        run: |
          # See : https://github.com/kubevirt/kubevirt/issues/4303
          # Add one magic line and reload service
          tweak_qemu_apprarmor="$(head -n -1 /etc/apparmor.d/usr.sbin.libvirtd; echo "  /usr/libexec/qemu-kvm rmix,"; tail -1 /etc/apparmor.d/usr.sbin.libvirtd)"
          echo "$tweak_qemu_apprarmor" | sudo dd of=/etc/apparmor.d/usr.sbin.libvirtd
          sudo systemctl reload apparmor.service

      - name: Install kubevirt
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            sudo kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/kubevirt-operator.yaml
            sudo kubectl create configmap kubevirt-config -n kubevirt --from-literal debug.useEmulation=true
            sudo kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/kubevirt-cr.yaml

      - name: Install virtcl
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            export ARCH=linux-amd64
            curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/v0.36.0/virtctl-v0.36.0-linux-amd64
            chmod +x virtctl
            sudo install virtctl /usr/local/bin

      # TODO : could build the docker instead of relying to a KUBESPRAY_VERSION(?)
      # - name: Build kubespray test container
      #   run: |
      #     docker build .  -t kubespray:latest
      #     # TODO : kind load is slow : set a private registry, as described here https://kind.sigs.k8s.io/docs/user/local-registry/
      #     sudo kind load docker-image kubespraykubespray:latest

      # - name: Push kubespray test image to Kind
      #   uses: nick-invision/retry@v2
      #   with:
      #     timeout_minutes: 5
      #     max_attempts: 3
      #     command: |
      #       sudo kind load docker-image kubespray:latest

      - name: Install kail
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            curl -SL https://github.com/boz/kail/releases/download/v0.15.0/kail_0.15.0_linux_amd64.tar.gz -o kail.tar.gz
            tar xf kail.tar.gz
            sudo install kail /usr/local/bin

      - name: Wait and get kubevirt status
        run: |
          # wait network is ready
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-operator
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-api || true
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-controller || true
          sudo kubectl wait --for=condition=ready pods --namespace=kubevirt -l kubevirt.io=virt-handler || true
          sudo kubectl get nodes -o wide
          sudo kubectl get pods -A

      - name: Launch background log scripts
        run: |
          # Kail monitors any logs from default namespace
          sudo kail -n default 2>&1 > /tmp/kail.log || true &
          # Infinite script waits for new VMs up and fetch logs from console
          (
            while true; do
            until sudo kubectl wait --for=condition=Ready pod -l kubevirt.io=virt-launcher --namespace default;
              do echo "Still Waiting Pod to start..."; sleep 5;
            done

            LOGFILE="virtcl-console-$(date '+%Y-%m-%d-%H-%M-%S').log"
            echo "Starting virtctl console" >> /tmp/${LOGFILE}
            sudo script -e -c "virtctl console instance" >> /tmp/${LOGFILE}
          done
          ) &
          # Event router reports any event as log, a great help for troubleshooting since Kind exports all running Pods logs
          sudo kubectl create -f https://raw.githubusercontent.com/heptiolabs/eventrouter/master/yaml/eventrouter.yaml

      - name: Launch test
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 25
          max_attempts: 3
          # on_retry_command: | to add if any
          command: |
            mkdir -p /home/runner/.ssh/
            export CI_PLATFORM=packet
            sudo -E tests/scripts/testcases_run.sh
        env:
          CI_JOB_NAME: ${{ matrix.ci_job_name }}

      - name: Dump and export logs
        if: always()
        run: |
          mkdir -p ${LOG_DIR} || true
          echo "** Events"
          sudo kubectl get events | tee ${LOG_DIR}/events.txt || true
          echo "** Jobs"
          sudo kubectl describe jobs | tee  ${LOG_DIR}/jobs.txt || true
          echo "** Configmap"
          sudo kubectl describe cm | tee ${LOG_DIR}/cm.txt || true
          echo "** Console log"
          sudo cat /tmp/virtcl-console*.log || true

          sudo cp /tmp/kail.log ${LOG_DIR} || true
          sudo cp /tmp/virtcl-console*.log ${LOG_DIR} || true
          sudo dmesg > ${LOG_DIR}/dmesg.txt || true
          sudo kind export logs ${LOG_DIR} || true
          sudo journalctl | cat > ${LOG_DIR}/journalctl.txt || true
          sudo chown -R $USER:$USER ${LOG_DIR} || true
        env:
          LOG_DIR: /tmp/kubespray-kubevirt/logs

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kubespray-kubevirt-${{ matrix.name }}-${{ github.run_id }}
          path: /tmp/kubespray-kubevirt/logs

      # FIXME : if always ?
      - name: Export logs
        if: always()
        run: |
          mkdir -p ${LOG_DIR} || true
          sudo kubectl get events > ${LOG_DIR}/events.txt || true
          sudo kubectl describe jobs > ${LOG_DIR}/jobs.txt || true
          sudo kubectl describe cm > ${LOG_DIR}/cm.txt || true
          cp /tmp/kail.log ${LOG_DIR} || true
          cp /tmp/describes.txt ${LOG_DIR} || true
          sudo  cp /tmp/virtcl.txt ${LOG_DIR} || true
          sudo dmesg > ${LOG_DIR}/dmesg.txt || true
          sudo kind export logs ${LOG_DIR} || true
          sudo journalctl | cat > ${LOG_DIR}/journalctl.txt || true
          sudo chown -R $USER:$USER ${LOG_DIR} || true
        env:
          LOG_DIR: ${{ matrix.log_dir }}

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kubespray-kubevirt-${{ matrix.tox_env }}-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: ${{ matrix.log_dir }}
    needs:
      - validate_code
      - validate_tf

  vagrant:
    name: ${{ matrix.ci_job_name }}
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - ci_job_name: vagrant_ubuntu18-flannel
            log_dir: /tmp/vagrant_ubuntu18-flannel-${{ github.run_id }}/logs

          - ci_job_name: vagrant_ubuntu18-weave-medium
            log_dir: /tmp/vagrant_ubuntu18-weave-medium-${{ github.run_id }}/logs

          - ci_job_name: vagrant_ubuntu20-flannel
            log_dir: /tmp/vagrant_ubuntu20-flannel-${{ github.run_id }}/logs
    env:
      CI_PLATFORM: "vagrant"
      SSH_USER: "vagrant"
      VAGRANT_DEFAULT_PROVIDER: "libvirt"
      VAGRANT_VERSION: 2.2.10
      UPGRADE_TEST: "false"
      ANSIBLE_LOG_LEVEL: "-vv"
      IDEMPOT_CHECK: "false"
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install a default Python
        uses: actions/setup-python@v2
        # TODO version (if really needed ?)
        # update-alternatives --install /usr/bin/python python /usr/bin/python3 10

      - name: Install vagrant deps
        run: |
          sudo sed -i~orig -e 's/# deb-src/deb-src/' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get build-dep vagrant ruby-libvirt
          sudo apt-get install qemu libvirt-daemon-system libvirt-clients ebtables dnsmasq-base
          sudo apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev
          sudo apt-get install qemu libvirt-daemon-system libvirt-clients libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev ruby-libvirt ebtables dnsmasq-base

      - name: Final vagrant install
        run: |
          wget https://releases.hashicorp.com/vagrant/${VAGRANT_VERSION}/vagrant_${VAGRANT_VERSION}_x86_64.deb
          sudo dpkg -i vagrant_${VAGRANT_VERSION}_x86_64.deb
          sudo vagrant plugin install vagrant-libvirt
          sudo vagrant plugin list

      - name: Setup test environment
        run: |
          sudo apt-get install -y python3-pip
          python -m pip install -r tests/requirements.txt
          # FIXME : no need in github ?./tests/scripts/vagrant_clean.sh

      - name: Launch vagrant test
        run: |
          export KUBESPRAY_VAGRANT_CONFIG=tests/files/${CI_JOB_NAME}.rb
          export IDEMPOT_CHECK="false"
          sudo vagrant plugin list
          sudo vagrant plugin install vagrant-libvirt
          sudo vagrant plugin list
          sudo -E tests/scripts/testcases_run.sh
        env:
          CI_JOB_NAME: ${{ matrix.ci_job_name }}

      - name: Upload logs 2
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: kubespray-kubevirt-${{ matrix.tox_env }}-${{ env.JOB_NAME }}-${{ github.run_id }}
          path: ${{ matrix.log_dir }}
    needs:
      - validate_code
      - validate_tf
